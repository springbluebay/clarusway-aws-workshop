AWSTemplateFormatVersion: 2010-09-09
Description: 
  Cloudformation template for milliseconds converter application
  This app runs on application load balancer

Resources:
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 
          ToPort: 
          CidrIp: 

  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP fot App only from ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !GetAtt ALBSecurityGroup.GroupId

  WebServerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
      ImageId: ami-08f3d892de259504d
      InstanceType: t2.micro
      KeyName: blueman
      SecurityGroupIds: 
        - !GetAtt WebServerSecurityGroup.GroupId
      TagSpecifications: 
        - ResourceType: instance
          Tags:
            Key: Name
            Value: !Sub Web Server of ${AWS::Stackname} Stack
      UserData:
        Fn::!Base64:
          #! /bin/bash
          yum update -y
          yum install python3 -y
          pip3 install flask
          TOKEN='xxxxxxxxxxx'
          FOLDER=""
          curl -s --create-dirs -o "/home/ec2/templates/index.html" -L "FOLDER"templates/index.html 
          curl -s --create-dirs -o "/home/ec2/templates/result.html" -L "FOLDER"templates/result.html 
          curl -s --create-dirs -o "/home/ec2/app.py" -L "FOLDER"app.py
          python3 /home/ec2/app.py

  WebServersTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: Integer
      VpcId: !GetAtt WebServerSecurityGroup.VpcId
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - subnet-8e7186af
        - subnet-8017e2df
        - subnet-e0ad91de
        - subnet-ddb65ebb
        - subnet-8e5ee6c3
        - subnet-478c2e49
      Type: application
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServersTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required
  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServersTG
Outputs:
  WebsiteURL:
    Description: Milliseconds Converter Application Load Balancer URL
    Value: !Sub 
      - http://${ALBaddress}
      - ALBaddress: !GetAtt ApplicationLoadBalancer.DNSName